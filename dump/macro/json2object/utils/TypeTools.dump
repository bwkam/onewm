class json2object.utils.TypeTools {

	public static inline function follow(type:haxe.macro.Type, once:Null<Bool> = null) {
		return haxe.macro.Context.follow(type, once);
	}

	@:value({ once : false })
	public static inline function followWithAbstracts(type:haxe.macro.Type, once:Bool = false) {
		return {
			var once = once;
			if ((once == null)) once = false;
			haxe.macro.Context.followWithAbstracts(type, once);
		};
	}

	public static inline function applyTypeParameters(type:haxe.macro.Type, typeParameters:Array<haxe.macro.TypeParameter>, concreteTypes:Array<haxe.macro.Type>) {
		return haxe.macro.TypeTools.applyTypeParameters(type, typeParameters, concreteTypes);
	}

	public static inline function toString(type:haxe.macro.Type) {
		return haxe.macro.TypeTools.toString(type);
	}

	public static inline function unify(t1:haxe.macro.Type, t2:haxe.macro.Type) {
		return haxe.macro.Context.unify(t1, t2);
	}

	public static inline function toComplexType(type:Null<haxe.macro.Type>) {
		return {
			{};
			@:ast(switch (type) {
	case null:
		null;	
	case TEnum(_.get().isPrivate => true, _):
		direct();	
	case TInst(_.get().isPrivate => true, _):
		direct();	
	case TType(_.get().isPrivate => true, _):
		direct();	
	case TAbstract(_.get().isPrivate => true, _):
		direct();	
	case TMono(_):
		direct();	
	case TEnum(_.get() => baseType, params):
		TPath(toTypePath(baseType, params));	
	case TInst(_.get() => classType, params):
		switch (classType.kind) {
			case KTypeParameter(_):
				var ct = asComplexType(classType.name);
				switch toType(ct) {
					case Some(TInst(_.get() => cl, _)) if (cl.kind.match(KTypeParameter(_)) && cl.module == classType.module && cl.pack.join(".") == classType.pack.join(".")):
						ct;					
					default:
						direct();					
				};			
			default:
				TPath(toTypePath(classType, params));			
		};	
	case TType(_.get() => baseType, params):
		TPath(toTypePath(baseType, params));	
	case TFun(args, ret):
		TFunction([for (a  in  args) a.opt ? nullable(toComplexType(a.t)) : toComplexType(a.t)], toComplexType(ret));	
	case TAnonymous(_.get() => { fields : fields }):
		TAnonymous([for (cf  in  fields) toField(cf)]);	
	case TDynamic(t):
		if (t == null) {
			(TPath({ pack : [], name : "Dynamic", params : [] }) : haxe.macro.Expr.ComplexType);
		} else {
			var ct = toComplexType(t);
			(TPath({ pack : [], name : "Dynamic", params : [TPType(ct)] }) : haxe.macro.Expr.ComplexType);
		};	
	case TLazy(f):
		toComplexType(f());	
	case TAbstract(_.get() => baseType, params):
		TPath(toTypePath(baseType, params));	
	default:
		throw "Invalid type";	
}) if (type == null) {
				null;
			} else switch (@:exhaustive enumIndex type) {
				case 0: {
					var `9 = type[0];
					{
						haxe.macro.TypeTools.toComplexType(type);
					};
				};
				case 1: {
					var `4 = type[0];
					var `5 = type[1];
					{
						var _hx_tmp;
						var _hx_tmp;
						if ((_hx_tmp = `4.get().isPrivate) == true) {
							{
								haxe.macro.TypeTools.toComplexType(type);
							};
						} else {
							var baseType = (_hx_tmp = `4.get());
							var params = `5;
							{
								haxe.macro.ComplexType.TPath(json2object.utils.TypeTools.toTypePath(baseType, params));
							};
						};
					};
				};
				case 2: {
					var `14 = type[0];
					var `15 = type[1];
					{
						var _hx_tmp;
						var _hx_tmp;
						if ((_hx_tmp = `14.get().isPrivate) == true) {
							{
								haxe.macro.TypeTools.toComplexType(type);
							};
						} else {
							var classType = (_hx_tmp = `14.get());
							var params = `15;
							{
								@:ast(switch (classType.kind) {
	case KTypeParameter(_):
		var ct = asComplexType(classType.name);
		switch toType(ct) {
			case Some(TInst(_.get() => cl, _)) if (cl.kind.match(KTypeParameter(_)) && cl.module == classType.module && cl.pack.join(".") == classType.pack.join(".")):
				ct;			
			default:
				direct();			
		};	
	default:
		TPath(toTypePath(classType, params));	
}) {
									var ` = classType.kind;
									if (enumIndex ` == 1) {
										var `1 = `[0];
										{
											var ct = {
												var s = classType.name;
												var params = null;
												haxe.macro.ComplexType.TPath(json2object.utils.TypeTools.asTypePath(s, params));
											};
											@:ast(switch toType(ct) {
	case Some(TInst(_.get() => cl, _)) if (cl.kind.match(KTypeParameter(_)) && cl.module == classType.module && cl.pack.join(".") == classType.pack.join(".")):
		ct;	
	default:
		direct();	
}) {
												var ` = json2object.utils.TypeTools.toType(ct, null);
												if (enumIndex ` == 0) {
													var `1 = `[0];
													if (enumIndex `1 == 2) {
														var `2 = `1[0];
														var `3 = `1[1];
														{
															var _hx_tmp;
															{
																var cl = (_hx_tmp = `2.get());
																if ({
																	var ` = cl.kind;
																	if (enumIndex ` == 1) {
																		var `1 = `[0];
																		true;
																	} else false;
																} && cl.module == classType.module && cl.pack.join(".") == classType.pack.join(".")) {
																	ct;
																} else {
																	haxe.macro.TypeTools.toComplexType(type);
																};
															};
														};
													} else {
														haxe.macro.TypeTools.toComplexType(type);
													};
												} else {
													haxe.macro.TypeTools.toComplexType(type);
												};
											};
										};
									} else {
										haxe.macro.ComplexType.TPath(json2object.utils.TypeTools.toTypePath(classType, params));
									};
								};
							};
						};
					};
				};
				case 3: {
					var `12 = type[0];
					var `13 = type[1];
					{
						var _hx_tmp;
						var _hx_tmp;
						if ((_hx_tmp = `12.get().isPrivate) == true) {
							{
								haxe.macro.TypeTools.toComplexType(type);
							};
						} else {
							var baseType = (_hx_tmp = `12.get());
							var params = `13;
							{
								haxe.macro.ComplexType.TPath(json2object.utils.TypeTools.toTypePath(baseType, params));
							};
						};
					};
				};
				case 4: {
					var `10 = type[0];
					var `11 = type[1];
					{
						var args = `10;
						var ret = `11;
						{
							haxe.macro.ComplexType.TFunction({
								var ` = [];
								{
									var `1 = 0;
									while (`1 < args.length) {
										var a = args[`1];
										++ `1;
										`.push(if (a.opt) {
											json2object.utils.TypeTools.nullable(json2object.utils.TypeTools.toComplexType(a.t));
										} else {
											json2object.utils.TypeTools.toComplexType(a.t);
										});
									};
								};
								`;
							}, json2object.utils.TypeTools.toComplexType(ret));
						};
					};
				};
				case 5: {
					var `6 = type[0];
					{
						var _hx_tmp;
						{
							var `7 = (_hx_tmp = `6.get()).fields;
							var `8 = _hx_tmp.status;
							{
								var fields = `7;
								{
									haxe.macro.ComplexType.TAnonymous({
										var ` = [];
										{
											var `1 = 0;
											while (`1 < fields.length) {
												var cf = fields[`1];
												++ `1;
												`.push(json2object.utils.TypeTools.toField(cf));
											};
										};
										`;
									});
								};
							};
						};
					};
				};
				case 6: {
					var `2 = type[0];
					{
						var t = `2;
						{
							if (t == null) {
								cast haxe.macro.ComplexType.TPath({pack : [], name : "Dynamic", params : []});
							} else {
								var ct = json2object.utils.TypeTools.toComplexType(t);
								cast haxe.macro.ComplexType.TPath({pack : [], name : "Dynamic", params : [haxe.macro.TypeParam.TPType(ct)]});
							};
						};
					};
				};
				case 7: {
					var `3 = type[0];
					{
						var f = `3;
						{
							json2object.utils.TypeTools.toComplexType(f());
						};
					};
				};
				case 8: {
					var ` = type[0];
					var `1 = type[1];
					{
						var _hx_tmp;
						var _hx_tmp;
						if ((_hx_tmp = `.get().isPrivate) == true) {
							{
								haxe.macro.TypeTools.toComplexType(type);
							};
						} else {
							var baseType = (_hx_tmp = `.get());
							var params = `1;
							{
								haxe.macro.ComplexType.TPath(json2object.utils.TypeTools.toTypePath(baseType, params));
							};
						};
					};
				};
			};
		};
	}

	static function toTypePath(baseType:haxe.macro.BaseType, params:Array<haxe.macro.Type>) {
		return {
			var module = baseType.module;
			var name = module.substring(module.lastIndexOf(".", null) + 1, null);
			var sub = @:ast(switch baseType.name {
	case _ == name => true:
		null;	
	case v:
		v;	
}) {
				var ` = baseType.name;
				{
					var _hx_tmp;
					if ((_hx_tmp = ` == name) == true) {
						{
							null;
						};
					} else {
						var v = `;
						{
							v;
						};
					};
				};
			};
			{pack : baseType.pack, name : name, sub : sub, params : {
				var `1 = [];
				{
					var `2 = 0;
					while (`2 < params.length) {
						var t = params[`2];
						++ `2;
						`1.push(@:ast(switch t {
	case TInst(_.get().kind => KExpr(e), _):
		TPExpr(e);	
	default:
		TPType(toComplexType(t));	
}) if (enumIndex t == 2) {
							var `2 = t[0];
							var `3 = t[1];
							{
								var _hx_tmp;
								if (enumIndex (_hx_tmp = `2.get().kind) == 3) {
									var `4 = _hx_tmp[0];
									{
										var e = `4;
										{
											haxe.macro.TypeParam.TPExpr(e);
										};
									};
								} else {
									haxe.macro.TypeParam.TPType(json2object.utils.TypeTools.toComplexType(t));
								};
							};
						} else {
							haxe.macro.TypeParam.TPType(json2object.utils.TypeTools.toComplexType(t));
						});
					};
				};
				`1;
			}};
		};
	}

	static inline function asComplexType(s:String, params:Null<Array<haxe.macro.TypeParam>> = null) {
		return haxe.macro.ComplexType.TPath(json2object.utils.TypeTools.asTypePath(s, params));
	}

	static function asTypePath(s:String, params:Null<Array<haxe.macro.TypeParam>> = null) {
		var parts = s.split(".");
		var name = parts.pop();
		var sub = null;
		if (parts.length > 0 && parts[parts.length - 1].charCodeAt(0) < 91) {
			sub = name;
			name = parts.pop();
			if (sub == name) {
				sub = null;
			};
		};
		return {name : name, pack : parts, params : if (params == null) {
			[];
		} else {
			params;
		}, sub : sub};
	}

	static function toType(t:haxe.macro.ComplexType, pos:Null<haxe.macro.Position> = null) {
		if (pos == null) {
			pos = haxe.macro.Context.currentPos();
		};
		return try {
			haxe.ds.Option.Some(haxe.macro.Context.typeof(cast {expr : haxe.macro.ExprDef.EBlock([{expr : haxe.macro.ExprDef.EVars([{name : "v", type : t, expr : {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("null")), pos : pos}, isFinal : cast false, meta : []}]), pos : pos}, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("v")), pos : pos}]), pos : pos}));
		} catch (`:Dynamic) {
			{};
			{};
			if (true) {
				{};
				{
					haxe.ds.Option.None;
				};
			} else throw `;
		};
	}

	static function nullable(complexType:haxe.macro.ComplexType) return cast haxe.macro.ComplexType.TPath({pack : [], name : "Null", params : [haxe.macro.TypeParam.TPType(complexType)]})

	static function toField(cf:haxe.macro.ClassField) return {
		var varAccessToString = function(va:haxe.macro.VarAccess, getOrSet:String) return {
			@:ast(switch (va) {
	case AccNormal:
		"default";	
	case AccNo:
		"null";	
	case AccNever:
		"never";	
	case AccResolve:
		throw "Invalid TAnonymous";	
	case AccCall:
		getOrSet;	
	case AccInline:
		"default";	
	case AccRequire(_, _):
		"default";	
	default:
		throw "not implemented";	
}) switch (enumIndex va) {
				case 0: {
					{
						"default";
					};
				};
				case 1: {
					{
						"null";
					};
				};
				case 2: {
					{
						"never";
					};
				};
				case 3: {
					{
						throw throw haxe.Exception.thrown("Invalid TAnonymous");
					};
				};
				case 4: {
					{
						getOrSet;
					};
				};
				case 5: {
					{
						"default";
					};
				};
				case 6: {
					var ` = va[0];
					var `1 = va[1];
					{
						"default";
					};
				};
				default: {
					throw throw haxe.Exception.thrown("not implemented");
				}
			};
		};
		if (cf.params.length == 0) {
			{name : cf.name, doc : cf.doc, access : (if (cf.isPublic) {
				[haxe.macro.Access.APublic];
			} else {
				[haxe.macro.Access.APrivate];
			}).concat(if (cf.isFinal) {
				[haxe.macro.Access.AFinal];
			} else {
				[];
			}), kind : @:ast(switch ([cf.kind, cf.type]) {
	case [FVar(_, _), ret] if (cf.isFinal):
		FVar(toComplexType(ret), null);	
	case [FVar(read, write), ret]:
		FProp(varAccessToString(read, "get"), varAccessToString(write, "set"), toComplexType(ret), null);	
	case [FMethod(_), TFun(args, ret)]:
		FFun({ args : [for (a  in  args) { name : a.name, opt : a.opt, type : toComplexType(a.t) }], ret : toComplexType(ret), expr : null });	
	default:
		throw "Invalid TAnonymous";	
}) {
				var ` = cf.kind;
				var `1 = cf.type;
				switch (@:exhaustive enumIndex `) {
					case 0: {
						var `2 = `[0];
						var `3 = `[1];
						{
							var ret = `1;
							if (cf.isFinal) {
								haxe.macro.FieldType.FVar(json2object.utils.TypeTools.toComplexType(ret), null);
							} else {
								var read = `2;
								var write = `3;
								var ret = `1;
								{
									haxe.macro.FieldType.FProp(varAccessToString(read, "get"), varAccessToString(write, "set"), json2object.utils.TypeTools.toComplexType(ret), null);
								};
							};
						};
					};
					case 1: {
						var `4 = `[0];
						if (enumIndex `1 == 4) {
							var `5 = `1[0];
							var `6 = `1[1];
							{
								var args = `5;
								var ret = `6;
								{
									haxe.macro.FieldType.FFun({args : {
										var ` = [];
										{
											var `1 = 0;
											while (`1 < args.length) {
												var a = args[`1];
												++ `1;
												`.push({name : a.name, opt : cast a.opt, type : json2object.utils.TypeTools.toComplexType(a.t)});
											};
										};
										`;
									}, ret : json2object.utils.TypeTools.toComplexType(ret), expr : null});
								};
							};
						} else {
							throw throw haxe.Exception.thrown("Invalid TAnonymous");
						};
					};
				};
			}, pos : cf.pos, meta : cf.meta.get()};
		} else {
			throw throw haxe.Exception.thrown("Invalid TAnonymous");
		};
	}
}