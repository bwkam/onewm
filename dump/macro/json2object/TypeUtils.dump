class json2object.TypeUtils {

	@:value(new Map<String,Bool>())
	static var exist:haxe.ds.Map<String, Bool> = {
		{};
		new haxe.ds.StringMap();
	};

	static function filterOnlyVar(ff:haxe.macro.ClassField) {
		return @:ast(switch (ff.kind) {
	case FVar(_, _):
		true;	
	default:
		false;	
}) {
			var ` = ff.kind;
			if (enumIndex ` == 0) {
				var `1 = `[0];
				var `2 = `[1];
				{
					true;
				};
			} else {
				false;
			};
		};
	}

	static function convertClassField(ff:haxe.macro.ClassField) {
		return {name : ff.name, doc : ff.doc, access : [haxe.macro.Access.APublic], kind : haxe.macro.FieldType.FVar({
			var type = ff.type;
			{
				{};
				@:ast(switch (type) {
	case null:
		null;	
	case TEnum(_.get().isPrivate => true, _):
		direct();	
	case TInst(_.get().isPrivate => true, _):
		direct();	
	case TType(_.get().isPrivate => true, _):
		direct();	
	case TAbstract(_.get().isPrivate => true, _):
		direct();	
	case TMono(_):
		direct();	
	case TEnum(_.get() => baseType, params):
		TPath(toTypePath(baseType, params));	
	case TInst(_.get() => classType, params):
		switch (classType.kind) {
			case KTypeParameter(_):
				var ct = asComplexType(classType.name);
				switch toType(ct) {
					case Some(TInst(_.get() => cl, _)) if (cl.kind.match(KTypeParameter(_)) && cl.module == classType.module && cl.pack.join(".") == classType.pack.join(".")):
						ct;					
					default:
						direct();					
				};			
			default:
				TPath(toTypePath(classType, params));			
		};	
	case TType(_.get() => baseType, params):
		TPath(toTypePath(baseType, params));	
	case TFun(args, ret):
		TFunction([for (a  in  args) a.opt ? nullable(toComplexType(a.t)) : toComplexType(a.t)], toComplexType(ret));	
	case TAnonymous(_.get() => { fields : fields }):
		TAnonymous([for (cf  in  fields) toField(cf)]);	
	case TDynamic(t):
		if (t == null) {
			(TPath({ pack : [], name : "Dynamic", params : [] }) : haxe.macro.Expr.ComplexType);
		} else {
			var ct = toComplexType(t);
			(TPath({ pack : [], name : "Dynamic", params : [TPType(ct)] }) : haxe.macro.Expr.ComplexType);
		};	
	case TLazy(f):
		toComplexType(f());	
	case TAbstract(_.get() => baseType, params):
		TPath(toTypePath(baseType, params));	
	default:
		throw "Invalid type";	
}) if (type == null) {
					null;
				} else switch (@:exhaustive enumIndex type) {
					case 0: {
						var `9 = type[0];
						{
							haxe.macro.TypeTools.toComplexType(type);
						};
					};
					case 1: {
						var `4 = type[0];
						var `5 = type[1];
						{
							var _hx_tmp;
							var _hx_tmp;
							if ((_hx_tmp = `4.get().isPrivate) == true) {
								{
									haxe.macro.TypeTools.toComplexType(type);
								};
							} else {
								var baseType = (_hx_tmp = `4.get());
								var params = `5;
								{
									haxe.macro.ComplexType.TPath(json2object.utils.TypeTools.toTypePath(baseType, params));
								};
							};
						};
					};
					case 2: {
						var `14 = type[0];
						var `15 = type[1];
						{
							var _hx_tmp;
							var _hx_tmp;
							if ((_hx_tmp = `14.get().isPrivate) == true) {
								{
									haxe.macro.TypeTools.toComplexType(type);
								};
							} else {
								var classType = (_hx_tmp = `14.get());
								var params = `15;
								{
									@:ast(switch (classType.kind) {
	case KTypeParameter(_):
		var ct = asComplexType(classType.name);
		switch toType(ct) {
			case Some(TInst(_.get() => cl, _)) if (cl.kind.match(KTypeParameter(_)) && cl.module == classType.module && cl.pack.join(".") == classType.pack.join(".")):
				ct;			
			default:
				direct();			
		};	
	default:
		TPath(toTypePath(classType, params));	
}) {
										var ` = classType.kind;
										if (enumIndex ` == 1) {
											var `1 = `[0];
											{
												var ct = {
													var s = classType.name;
													var params = null;
													haxe.macro.ComplexType.TPath(json2object.utils.TypeTools.asTypePath(s, params));
												};
												@:ast(switch toType(ct) {
	case Some(TInst(_.get() => cl, _)) if (cl.kind.match(KTypeParameter(_)) && cl.module == classType.module && cl.pack.join(".") == classType.pack.join(".")):
		ct;	
	default:
		direct();	
}) {
													var ` = json2object.utils.TypeTools.toType(ct, null);
													if (enumIndex ` == 0) {
														var `1 = `[0];
														if (enumIndex `1 == 2) {
															var `2 = `1[0];
															var `3 = `1[1];
															{
																var _hx_tmp;
																{
																	var cl = (_hx_tmp = `2.get());
																	if ({
																		var ` = cl.kind;
																		if (enumIndex ` == 1) {
																			var `1 = `[0];
																			true;
																		} else false;
																	} && cl.module == classType.module && cl.pack.join(".") == classType.pack.join(".")) {
																		ct;
																	} else {
																		haxe.macro.TypeTools.toComplexType(type);
																	};
																};
															};
														} else {
															haxe.macro.TypeTools.toComplexType(type);
														};
													} else {
														haxe.macro.TypeTools.toComplexType(type);
													};
												};
											};
										} else {
											haxe.macro.ComplexType.TPath(json2object.utils.TypeTools.toTypePath(classType, params));
										};
									};
								};
							};
						};
					};
					case 3: {
						var `12 = type[0];
						var `13 = type[1];
						{
							var _hx_tmp;
							var _hx_tmp;
							if ((_hx_tmp = `12.get().isPrivate) == true) {
								{
									haxe.macro.TypeTools.toComplexType(type);
								};
							} else {
								var baseType = (_hx_tmp = `12.get());
								var params = `13;
								{
									haxe.macro.ComplexType.TPath(json2object.utils.TypeTools.toTypePath(baseType, params));
								};
							};
						};
					};
					case 4: {
						var `10 = type[0];
						var `11 = type[1];
						{
							var args = `10;
							var ret = `11;
							{
								haxe.macro.ComplexType.TFunction({
									var ` = [];
									{
										var `1 = 0;
										while (`1 < args.length) {
											var a = args[`1];
											++ `1;
											`.push(if (a.opt) {
												json2object.utils.TypeTools.nullable(json2object.utils.TypeTools.toComplexType(a.t));
											} else {
												json2object.utils.TypeTools.toComplexType(a.t);
											});
										};
									};
									`;
								}, json2object.utils.TypeTools.toComplexType(ret));
							};
						};
					};
					case 5: {
						var `6 = type[0];
						{
							var _hx_tmp;
							{
								var `7 = (_hx_tmp = `6.get()).fields;
								var `8 = _hx_tmp.status;
								{
									var fields = `7;
									{
										haxe.macro.ComplexType.TAnonymous({
											var ` = [];
											{
												var `1 = 0;
												while (`1 < fields.length) {
													var cf = fields[`1];
													++ `1;
													`.push(json2object.utils.TypeTools.toField(cf));
												};
											};
											`;
										});
									};
								};
							};
						};
					};
					case 6: {
						var `2 = type[0];
						{
							var t = `2;
							{
								if (t == null) {
									cast haxe.macro.ComplexType.TPath({pack : [], name : "Dynamic", params : []});
								} else {
									var ct = json2object.utils.TypeTools.toComplexType(t);
									cast haxe.macro.ComplexType.TPath({pack : [], name : "Dynamic", params : [haxe.macro.TypeParam.TPType(ct)]});
								};
							};
						};
					};
					case 7: {
						var `3 = type[0];
						{
							var f = `3;
							{
								json2object.utils.TypeTools.toComplexType(f());
							};
						};
					};
					case 8: {
						var ` = type[0];
						var `1 = type[1];
						{
							var _hx_tmp;
							var _hx_tmp;
							if ((_hx_tmp = `.get().isPrivate) == true) {
								{
									haxe.macro.TypeTools.toComplexType(type);
								};
							} else {
								var baseType = (_hx_tmp = `.get());
								var params = `1;
								{
									haxe.macro.ComplexType.TPath(json2object.utils.TypeTools.toTypePath(baseType, params));
								};
							};
						};
					};
				};
			};
		}, null), pos : ff.pos, meta : ff.meta.get()};
	}

	public static function copyType(t:haxe.macro.ClassType) {
		t.pack.pop();
		var n = t.name + "__json2object_nonprivate_copy";
		var m = t.pack.join(".");
		t = {module : m, name : n, isPrivate : false, isFinal : false, init : t.init, constructor : t.constructor, doc : t.doc, params : t.params, pos : t.pos, fields : t.fields, overrides : t.overrides, pack : t.pack, kind : t.kind, meta : t.meta, superClass : t.superClass, interfaces : t.interfaces, statics : t.statics, isExtern : t.isExtern, isAbstract : t.isAbstract, exclude : t.exclude, isInterface : t.isInterface};
		if (! {
			var this = json2object.TypeUtils.exist;
			var key = t.name;
			cast this.exists(key);
		}) {
			var td = {doc : t.doc, pack : t.pack, name : t.name, pos : t.pos, meta : t.meta.get(), params : {
				var ` = [];
				{
					var `1 = 0;
					var `2 = t.params;
					while (`1 < `2.length) {
						var p = `2[`1];
						++ `1;
						`.push({name : p.name});
					};
				};
				`;
			}, isExtern : cast t.isExtern, kind : haxe.macro.TypeDefKind.TDClass(null, null, null, null, null), fields : {
				var `3 = [];
				{
					var `4 = 0;
					var `5 = Lambda.filter(t.fields.get(), json2object.TypeUtils.filterOnlyVar);
					while (`4 < `5.length) {
						var f = `5[`4];
						++ `4;
						`3.push(json2object.TypeUtils.convertClassField(f));
					};
				};
				`3;
			}};
			haxe.macro.Context.defineType(td, null);
			{
				var this = json2object.TypeUtils.exist;
				var key = t.name;
				cast this.set(key, true);
			};
		};
		return t;
	}
}