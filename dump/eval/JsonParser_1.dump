@:directlyUsed @:used
class JsonParser_1 extends json2object.reader.BaseParser<JsonModel> {

	@:pure(inferredPure) @:value({ errorType : json2object.Error.ErrorType.NONE, putils : null, errors : null })
	public function new(errors:Null<Array<json2object.Error>> = null, putils:Null<json2object.PositionUtils> = null, errorType:Null<json2object.ErrorType> = 0) {
		super(errors, putils, errorType);
	}

	function onIncorrectType(pos:json2object.Position, variable:String) {
		this.errors.push(json2object.Error.IncorrectType(variable, "{ workspaces : Array<String>, rules : Array<Map<String, RuleModel>>, config : Map<String, ConfigModel> }", pos));
		super.onIncorrectType(pos, variable);
	}

	function loadJsonNull(pos:json2object.Position, variable:String) {
		this.value = null;
	}

	function loadJsonObject(o:Array<hxjsonast.JObjectField>, pos:json2object.Position, variable:String) {
		var assigned = new haxe.ds.StringMap();
		this.objectSetupAssign(assigned, ["config", "rules", "workspaces"], [false, false, false]);
		this.value = this.getAuto();
		{
			var ` = 0;
			while ((` < o.length)) {
				var field = o[`];
				++ `;
				switch ((field.name)) {
					case "config": this.value.config = cast this.loadObjectField(new JsonParser_3(this.errors, this.putils, cast 1).loadJson, field, "config", assigned, @:implicitCast cast this.value.config, pos);
					case "rules": this.value.rules = cast this.loadObjectField(new JsonParser_4(this.errors, this.putils, cast 1).loadJson, field, "rules", assigned, @:implicitCast cast this.value.rules, pos);
					case "workspaces": this.value.workspaces = cast this.loadObjectField(new JsonParser_5(this.errors, this.putils, cast 1).loadJson, field, "workspaces", assigned, @:implicitCast cast this.value.workspaces, pos);
					default: this.errors.push(json2object.Error.UnknownVariable(field.name, this.putils.convertPosition(field.namePos)))
				};
			};
		};
		this.objectErrors(assigned, pos);
	}

	public function getAuto() {
		return {config : new JsonParser_3([], this.putils, cast 0).loadJson(new hxjsonast.Json(hxjsonast.JsonValue.JNull, new hxjsonast.Position("", 0, 1)), null), rules : new JsonParser_4([], this.putils, cast 0).loadJson(new hxjsonast.Json(hxjsonast.JsonValue.JNull, new hxjsonast.Position("", 0, 1)), null), workspaces : new JsonParser_5([], this.putils, cast 0).loadJson(new hxjsonast.Json(hxjsonast.JsonValue.JNull, new hxjsonast.Position("", 0, 1)), null)};
	}
}