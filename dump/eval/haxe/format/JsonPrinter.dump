@:keep @:directlyUsed @:used
class haxe.format.JsonPrinter {

	function new(replacer:(key : Dynamic, value : Dynamic) -> Dynamic, space:String) {
		this.replacer = replacer;
		this.indent = space;
		this.pretty = space != null;
		this.nind = 0;
		this.buf = new StringBuf();
	}

	var buf:StringBuf;

	var replacer:(key : Dynamic, value : Dynamic) -> Dynamic;

	var indent:String;

	var pretty:Bool;

	var nind:Int;

	function write(k:Dynamic, v:Dynamic) {
		if ((this.replacer != null)) v = this.replacer(k, v);
		{
			var ` = Type.typeof(v);
			switch ((@:exhaustive enumIndex `)) {
				case 0: this.buf.add("null");
				case 1: this.buf.add(cast v);
				case 2: {
					var v = if ((Math.isFinite(v))) Std.string(v) else "null";
					this.buf.add(v);
				};
				case 3: this.buf.add(cast v);
				case 4: this.fieldsString(v, Reflect.fields(v));
				case 5: this.buf.add("\"<fun>\"");
				case 6: {
					var `1 = `[0];
					if ((`1 == String)) this.quote(v) else if ((`1 == Array)) {
						var v = v;
						this.buf.addChar(91);
						var len = v.length;
						var last = len - 1;
						{
							var ` = 0;
							while ((` < len)) {
								var i = ` ++;
								if ((i > 0)) this.buf.addChar(44) else this.nind ++;
								if ((this.pretty)) this.buf.addChar(10);
								if ((this.pretty)) {
									var v = StringTools.lpad("", this.indent, this.nind * this.indent.length);
									this.buf.add(v);
								};
								this.write(i, v[i]);
								if ((i == last)) {
									this.nind --;
									if ((this.pretty)) this.buf.addChar(10);
									if ((this.pretty)) {
										var v = StringTools.lpad("", this.indent, this.nind * this.indent.length);
										this.buf.add(v);
									};
								};
							};
						};
						this.buf.addChar(93);
					} else if ((`1 == haxe.ds.StringMap)) {
						var v = v;
						var o = {};
						{
							var k = v.keys();
							while ((k.hasNext())) {
								var k = k.next();
								Reflect.setField(o, k, v.get(k));
							};
						};
						{
							var v = cast o;
							this.fieldsString(v, Reflect.fields(v));
						};
					} else if ((`1 == Date)) this.quote(cast v.toString()) else this.classString(v);
				};
				case 7: {
					var i = Type.enumIndex(v);
					this.buf.add(cast i);
				};
				case 8: this.buf.add("\"???\"");
			};
		};
	}

	function classString(v:Dynamic) {
		this.fieldsString(v, Type.getInstanceFields(Type.getClass(v)));
	}

	function fieldsString(v:Dynamic, fields:Array<String>) {
		this.buf.addChar(123);
		var len = fields.length;
		var last = len - 1;
		var first = true;
		{
			var ` = 0;
			while ((` < len)) {
				var i = ` ++;
				var f = fields[i];
				var value = Reflect.field(v, f);
				if ((Reflect.isFunction(value))) continue;
				if ((first)) {
					this.nind ++;
					first = false;
				} else this.buf.addChar(44);
				if ((this.pretty)) this.buf.addChar(10);
				if ((this.pretty)) {
					var v = StringTools.lpad("", this.indent, this.nind * this.indent.length);
					this.buf.add(v);
				};
				this.quote(f);
				this.buf.addChar(58);
				if ((this.pretty)) this.buf.addChar(32);
				this.write(f, value);
				if ((i == last)) {
					this.nind --;
					if ((this.pretty)) this.buf.addChar(10);
					if ((this.pretty)) {
						var v = StringTools.lpad("", this.indent, this.nind * this.indent.length);
						this.buf.add(v);
					};
				};
			};
		};
		this.buf.addChar(125);
	}

	function quote(s:String) {
		this.buf.addChar(34);
		var i = 0;
		var length = s.length;
		while ((i < length)) {
			var c = StringTools.unsafeCodeAt(s, i ++);
			switch ((c)) {
				case 8: this.buf.add("\\b");
				case 9: this.buf.add("\\t");
				case 10: this.buf.add("\\n");
				case 12: this.buf.add("\\f");
				case 13: this.buf.add("\\r");
				case 34: this.buf.add("\\\"");
				case 92: this.buf.add("\\\\");
				default: this.buf.addChar(c)
			};
		};
		this.buf.addChar(34);
	}

	public static function print(o:Dynamic, replacer:Null<(key : Dynamic, value : Dynamic) -> Dynamic> = null, space:Null<String> = null) {
		var printer = new haxe.format.JsonPrinter(replacer, space);
		printer.write("", o);
		return printer.buf.toString();
	}
}